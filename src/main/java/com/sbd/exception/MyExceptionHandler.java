package com.sbd.exception;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.PropertySource;
import org.springframework.core.env.Environment;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.context.request.WebRequest;
import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;

/**
 * @author rushikeshM
 *	This Is Exception Handler Class
 *	All The Custom Exception Will Handle By This Class
 *	We Can Define Which HTTP Status Should Revert To API Caller.
 */
@PropertySource({ "classpath:application.properties" })
@ControllerAdvice
@RestController
public class MyExceptionHandler extends ResponseEntityExceptionHandler {
	
	@Autowired
	Environment env;
	
	/**
	 * 404 Not Found Exception
	 * This Method Is To Handle Custom UserNotFoundException
	 */
	 @ExceptionHandler(UserNotFoundException.class)
	 public final ResponseEntity<ErrorDetails> handleUserNotFoundException(UserNotFoundException ex, WebRequest request) {
	    ErrorDetails errorDetails = new ErrorDetails("Exception Generated By Spring Demo Application",ex.getMessage(),
	        request.getDescription(false));
	    return new ResponseEntity<>(errorDetails, HttpStatus.NOT_FOUND);
	 }
	 
	 /**
	  * 500 Internal Server Error
	  * If By Mistake Developer Forgot To Put Error Prone Code Into Try Catch Block, No Worry.
	  * This Method Will Handle That For You
	  */
	 @ExceptionHandler(Exception.class)
	  public final ResponseEntity<ErrorDetails> handleAllExceptions(Exception ex, WebRequest request) {
	    ErrorDetails errorDetails = new ErrorDetails("Exception Generated By Spring Demo Application","Service Failed To Execute",
	        request.getDescription(false));
	    return new ResponseEntity<>(errorDetails, HttpStatus.INTERNAL_SERVER_ERROR);
	  }
	 
	 /**
	  * 406 Not Acceptable
	  * This Method Is To Handle Custom EmptyRequestBeanException
	  */
	 @ExceptionHandler(EmptyRequestBeanException.class)
	 public final ResponseEntity<ErrorDetails> handleEmptyResponseBeanException(EmptyRequestBeanException ex, WebRequest request) {
	    ErrorDetails errorDetails = new ErrorDetails("Exception Generated By Spring Demo Application",ex.getMessage(),
	        request.getDescription(false));
	    return new ResponseEntity<>(errorDetails, HttpStatus.NOT_ACCEPTABLE);
	 }
	 
	 /**
	  * 400 Bad Request
	  * This Method Is To Validate Request JSON
	  */
	 @Override
	  protected ResponseEntity<Object> handleMethodArgumentNotValid(MethodArgumentNotValidException ex,
	      HttpHeaders headers, HttpStatus status, WebRequest request) {
	    ErrorDetails errorDetails = new ErrorDetails("Exception Generated By Spring Demo Application", "Validation Failed",
	        ex.getBindingResult().toString());
	    return new ResponseEntity(errorDetails, HttpStatus.BAD_REQUEST);
	  }
	 
	 /**
	  * 503 Service Unavailable
	  * This Method Is To Handle Redis Cache Exception
	  */
	 @ExceptionHandler(CacheServiceException.class)
	 public final ResponseEntity<ErrorDetails> handleCacheServiceException(CacheServiceException ex, WebRequest request) {
	    ErrorDetails errorDetails = new ErrorDetails("Exception Generated By Spring Demo Application",ex.getMessage(),
	        request.getDescription(false));
	    return new ResponseEntity<>(errorDetails, HttpStatus.SERVICE_UNAVAILABLE);
	 }
}
